import os
import shutil

import numpy as np

# TODO: Load the distributions from a config file
strata_distributions = {
    "stratum_0": 0.2,
    "stratum_1": 0.4,
    "stratum_2": 0.1,
    "stratum_3": 0.3,
}

rdh_distributions = {
    "all": 0.0,
    "all_weak": 0.0,
    "all_weak_2": 0.0,
    "all_weak_3": 0.0,
    "comments_remove": 0.06,
    "methods": 0.4,
    "misc": 0.06,
    "newlines_few": 0.06,
    "newlines_many": 0.06,
    "realistic": 0.06,
    "rename": 0.06,
    "spaces_few": 0.06,
    "spaces_many": 0.06,
    "tabs_few": 0.06,
    "tabs_many": 0.06,
}


class Snippet:
    """
    A snippet is a code snippet. It belongs to a RDH.
    """

    def __init__(self, name: str):
        """
        Initialize the snippet.
        :param name:
        """
        self.stratum = None
        self.rdh = None
        self.name = name

    def set_rdh(self, rdh):
        """
        Set the rdh the snippet belongs to.
        :param rdh: The rdh the snippet belongs to.
        :return: None
        """
        self.rdh = rdh

    def set_stratum(self, stratum):
        """
        Set the stratum the snippet belongs to.
        :param stratum: The stratum the snippet belongs to.
        :return: None
        """
        self.stratum = stratum


class RDH:
    """
    A RDH is one readability-decreasing-heuristic variant generated by a single config.
    A RDH belongs to a stratum.
    """

    def __init__(self, name: str, probability: float, unused_snippets: list[Snippet]):
        """
        Initialize the RDH.
        :param name: The name of the RDH.
        :param probability: The probability of the RDH for sampling.
        :param unused_snippets: The list of unused snippets.
        """
        self.name = name
        self.probability = probability
        self.unused_snippets = unused_snippets
        for snippet in unused_snippets:
            snippet.set_rdh(self)
        self.stratum = None

    def set_stratum(self, stratum):
        """
        Set the stratum the RDH belongs to.
        :param stratum: The stratum the RDH belongs to.
        :return: None
        """
        self.stratum = stratum


class Stratum:
    """
    A stratum is a group of RDHs that are similar according to the stratified sampling.
    """

    def __init__(self, name: str, probability: float, rdhs: list[RDH]):
        """
        Initialize the stratum.
        :param name: The name of the stratum.
        :param probability: The probability of the stratum for sampling.
        :param rdhs: The list of RDHs.
        """
        self.name = name
        self.probability = probability
        self.rdhs = rdhs
        for rdh in rdhs:
            rdh.set_stratum(self)
            for snippet in rdh.unused_snippets:
                snippet.set_stratum(self)


class Survey:
    """
    A survey contains a list of snippets.
    """

    def __init__(self, snippets):
        """
        Initialize the survey.
        :param snippets: The list of snippets belonging to the survey.
        """
        self.snippets = snippets


def select_stratum(strata: list[Stratum]) -> Stratum:
    """
    Select a stratum according to the probabilities.
    :param strata: The list of strata to select from.
    :return: The selected stratum.
    """
    stratum_probabilities = [stratum.probability for stratum in strata]
    stratum = np.random.choice(strata, p=stratum_probabilities)
    return stratum


def select_rdh(rdhs: list[RDH]) -> RDH:
    """
    Select a rdh according to the probabilities.
    :param rdhs: The list of rdhs to select from.
    :return: The selected rdh.
    """
    rdh_probabilities = [rdh.probability for rdh in rdhs]
    rdh = np.random.choice(rdhs, p=rdh_probabilities)
    return rdh


def select_snippet(snippets: list[Snippet]) -> Snippet:
    """
    Select a snippet according to the probabilities.
    :param snippets: The list of snippets to select from.
    :return: The selected snippet.
    """
    snippet_probabilities = [1 / len(snippets) for snippet in snippets]
    snippet = np.random.choice(snippets, p=snippet_probabilities)
    return snippet


def list_non_hidden(dir: str) -> list[str]:
    """
    List the non-hidden files in the given directory. Also ignores .log files.
    :param dir: The directory to list the files from.
    :return: The list of non-hidden files.
    """
    return [f for f in os.listdir(dir) if
            not f.startswith(".") and not f.endswith(".log")]


def craft_surveys(input_dir, output_dir, snippets_per_sheet=20, num_sheets=20):
    """
    Craft surveys from the given input directory and save them to the given
    output directory.
    :param input_dir: The input directory with the stratas, rdhs and snippets.
    :param output_dir: The output directory to save the surveys to.
    :param snippets_per_sheet: How many snippets per sheet.
    :param num_sheets: How many sheets.
    :return: None
    """
    # Load the strata names as the names of the subdirectories
    strata_names = list_non_hidden(input_dir)

    # Assign each stratum a probability distribution
    strata_probabilities = []
    for strata_name in strata_names:
        strata_probabilities.append(strata_distributions[strata_name])

    # Load the rdh names as the subdirectories of each stratum
    rdh_names = {}
    for strata_name in strata_names:
        rdh_names[strata_name] = list_non_hidden(os.path.join(input_dir, strata_name))

    # Assign each rdh a probability distribution
    rdh_probabilities = {}
    for strata_name in strata_names:
        rdh_probabilities[strata_name] = []
        for rdh_name in rdh_names[strata_name]:
            rdh_probabilities[strata_name].append(rdh_distributions[rdh_name])

    # Convert the strats and rdhs to objects with probabilities
    # If no probability is specified, the probability is 0
    strata = []
    for strata_name, strata_probability in zip(strata_names, strata_probabilities):
        rdhs = []
        for rdh_name, rdh_probability in zip(rdh_names[strata_name],
                                             rdh_probabilities[strata_name]):
            unused_snippet_names = list_non_hidden(os.path.join(input_dir, strata_name,
                                                                rdh_name))
            unused_snippets = [Snippet(snippet_name) for snippet_name in
                               unused_snippet_names]
            rdhs.append(RDH(rdh_name, rdh_probability, unused_snippets))
        strata.append(Stratum(strata_name, strata_probability, rdhs))

    # Remove empty rdhs and stratas
    for stratum in strata:
        stratum.rdhs = [rdh for rdh in stratum.rdhs if len(rdh.unused_snippets) > 0]
    strata = [stratum for stratum in strata if len(stratum.rdhs) > 0]

    # Create num_sheet surveys with different snippets according to the probabilities
    surveys = []
    used_snippets = []
    for i in range(num_sheets):
        snippets = []
        for j in range(snippets_per_sheet):
            # Select a stratum according to the probabilities
            stratum = select_stratum(strata)

            # Select a rdh according to the probabilities
            rdh = select_rdh(stratum.rdhs)

            # Select a snippet according to the probabilities
            snippet = select_snippet(rdh.unused_snippets)

            # Add the snippet to the list of snippets
            snippets.append(snippet)

            # Add the snippet to the list of used snippets
            used_snippets.append(snippet)

            # Remove the snippet from the list of unused snippets
            rdh.unused_snippets.remove(snippet)

            # If it was the last snippet, remove the rdh
            if len(rdh.unused_snippets) == 0:
                stratum.rdhs.remove(rdh)

            # If it was the last rdh, remove the stratum
            if len(stratum.rdhs) == 0:
                strata.remove(stratum)

        # Add the survey to the list of surveys
        surveys.append(Survey(snippets))

    # Create num_sheets output subdirectories
    for i in range(num_sheets):
        os.makedirs(os.path.join(output_dir, f"sheet_{i}"), exist_ok=True)

    # Copy the snippets to the output subdirectories
    # The new names are stratum_rdh_oldName
    for i, survey in enumerate(surveys):
        for j, snippet in enumerate(survey.snippets):
            stratum = snippet.stratum.name
            rdh = snippet.rdh.name
            old_name = snippet.name
            new_name = f"{stratum}_{rdh}_{old_name}"
            shutil.copy(
                os.path.join(input_dir, stratum, rdh, old_name),
                os.path.join(output_dir, f"sheet_{i}", new_name),
            )
